#!/usr/bin/env node

/**
 * Improved Photo Matching Script
 * 
 * This script creates a better mapping between Arabic photo names and menu items,
 * then uploads them with proper unique filenames.
 */

const fs = require('fs').promises;
const path = require('path');
const https = require('https');

// Supabase Configuration
const SUPABASE_URL = 'https://eoaissoqwlfvfizfomax.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVvYWlzc29xd2xmdmZpemZvbWF4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk3NTY5OTIsImV4cCI6MjA3NTMzMjk5Mn0.SHkFV9EvSnWVmC0tApVU6A6C1rrDqsPMO922rMC1JpY';

class ImprovedPhotoMatcher {
  constructor() {
    this.photosFolder = path.join(__dirname, '..', 'Piko Web app Photos');
    this.photoMappings = new Map(); // Store photo mappings
  }

  /**
   * Make HTTP request to Supabase
   */
  makeRequest(path, options = {}) {
    return new Promise((resolve, reject) => {
      const url = new URL(path, SUPABASE_URL);
      
      const requestOptions = {
        hostname: url.hostname,
        port: url.port || 443,
        path: url.pathname + url.search,
        method: options.method || 'GET',
        headers: {
          'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
          'apikey': SUPABASE_ANON_KEY,
          'Content-Type': 'application/json',
          ...options.headers
        }
      };

      const req = https.request(requestOptions, (res) => {
        let data = '';
        
        res.on('data', (chunk) => {
          data += chunk;
        });
        
        res.on('end', () => {
          if (res.statusCode >= 200 && res.statusCode < 300) {
            resolve({
              success: true,
              data: data ? JSON.parse(data) : null,
              statusCode: res.statusCode
            });
          } else {
            resolve({
              success: false,
              error: `HTTP ${res.statusCode}: ${data}`,
              statusCode: res.statusCode
            });
          }
        });
      });

      req.on('error', (error) => {
        resolve({
          success: false,
          error: error.message
        });
      });

      if (options.body) {
        req.write(options.body);
      }
      
      req.end();
    });
  }

  /**
   * Create safe filename for Supabase Storage
   */
  createSafeFilename(originalName, index) {
    // Remove .jpg extension
    const nameWithoutExt = originalName.replace('.jpg', '');
    
    // Create a safe filename with index to ensure uniqueness
    const safeName = `photo-${index}-${Date.now()}.jpg`;
    
    return safeName;
  }

  /**
   * Upload image to Supabase Storage
   */
  async uploadImageToSupabase(imageBuffer, filename) {
    try {
      const formData = new FormData();
      const blob = new Blob([imageBuffer], { type: 'image/jpeg' });
      formData.append('file', blob, filename);
      const filePath = `menu-items/${filename}`;

      const response = await fetch(`${SUPABASE_URL}/storage/v1/object/menu-images/${filePath}`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
        },
        body: formData
      });

      if (response.ok) {
        const publicUrl = `${SUPABASE_URL}/storage/v1/object/public/menu-images/${filePath}`;
        return { success: true, url: publicUrl, filename };
      } else {
        const errorText = await response.text();
        return { success: false, error: `HTTP ${response.status}: ${errorText}` };
      }
    } catch (error) {
      return { success: false, error: error.message };
    }
  }

  /**
   * Get all items from database
   */
  async getAllItems() {
    try {
      console.log('๐ Fetching all items from database...');
      
      const result = await this.makeRequest('/rest/v1/items?select=*', {
        method: 'GET'
      });

      if (!result.success) {
        console.error('โ Failed to fetch items:', result.error);
        return [];
      }

      const items = result.data || [];
      console.log(`๐ Found ${items.length} items in database`);
      
      return items;
    } catch (error) {
      console.error('โ Error fetching items:', error.message);
      return [];
    }
  }

  /**
   * Update item image URL in database
   */
  async updateItemImage(itemId, imageUrl) {
    try {
      const result = await this.makeRequest(`/rest/v1/items?id=eq.${itemId}`, {
        method: 'PATCH',
        headers: {
          'Prefer': 'return=minimal'
        },
        body: JSON.stringify({
          image_url: imageUrl
        })
      });

      return result.success;
    } catch (error) {
      console.error(`โ Error updating item ${itemId}:`, error.message);
      return false;
    }
  }

  /**
   * Normalize Arabic text for matching
   */
  normalizeArabicText(text) {
    return text
      .replace(/[\u064B-\u0652\u0670\u0640]/g, '') // Remove diacritics
      .replace(/[ุฃุฅุข]/g, 'ุง') // Normalize alef variants
      .replace(/[ุฉ]/g, 'ู') // Normalize teh marbuta
      .replace(/\s+/g, ' ') // Normalize spaces
      .trim()
      .toLowerCase();
  }

  /**
   * Create manual mappings for better matching
   */
  createManualMappings() {
    const mappings = {
      // Coffee items
      'ุงุณุจุฑูุณู': ['ุงุณุจุฑูุณู.jpg', 'ุฏุจู ุงุณุจุฑูุณู.jpg'],
      'ุฏุจู ุงุณุจุฑูุณู': ['ุฏุจู ุงุณุจุฑูุณู.jpg'],
      'ุงุณุจุฑูุณู ูููุงุชู': ['ูุงุฑุงููู ูุงููุงุชู .jpg'],
      'ุงุณุจุฑูุณู ุงูููุงุชู': ['ุงุณุจุฑูุณู.jpg'],
      'ุงุณุจุฑูุณู ุฑูุณุชุฑูุชู': ['ุงุณุจุฑูุณู.jpg'],
      'ูุงุจุชุดููู': ['ููุดู ูุงุชูู ุณุฎู ููุงุจุชุดููู .jpg'],
      'ูุงุชูู': ['ุงูุณ ุจููู ูุงุชูู.jpg'],
      'ููุงุช ูุงูุช': ['ููุงุช ูุงูุช.jpg'],
      'ููุฑุชุงุฏู': ['ููุฑุชุงุฏู.jpg'],
      'ุงูุฑููุงูู': ['ุงูุฑููุงูู.jpg'],
      
      // Waffles
      'ูุงูู ุงูุฑูู': ['ูุงูู ุงูุฑูู.jpg'],
      'ูุงูู ุจุณุชุงุดูู': ['ูุงูู ุจุณุชุงุดูู.jpg'],
      'ูุงูู ุดููููุง': ['ูุงูู ุดููููุง .jpg'],
      'ูุงูู ูุฑูุฒ': ['ูุงูู ูุฑูุฒ.jpg'],
      'ูุงูู ููุงูู': ['ูุงูู ููุงูู.jpg'],
      'ูุงูู ูุงุฑุดูููู': ['ูุงูู ูุงุฑุดูููู.jpg'],
      'ูุงูู ููุชูุณ': ['ูุงูู ููุชูุณ.jpg'],
      
      // Crepes
      'ูุฑูุจ ุดููููุง': ['ูุฑูุจ ุดููููุง .jpg'],
      'ูุฑูุจ ููุงูู': ['ูุฑูุจ ููุงูู.jpg'],
      'ูุฑูุจ ููุชูุณ': ['ูุฑูุจ ููุชูุณ.jpg'],
      'ูุฑูุจ ููุชูุชุดููู': ['ูุฑูุจ ููุชูุชุดููู.jpg'],
      'ูุฑูุจ ุจููู': ['ูุฑูุจ ุจููู.jpg'],
      'ูุฑูุจ ุชุดูุฒ ููู': ['ูุฑูุจ ุชุดูุฒ ููู.jpg'],
      'ูุฑูุจ ุงูุฑูู': ['ูุฑูุจ ุงูุฑูู.jpg'],
      'ูุฑูุจ ุจุณุชุงุดูู': ['ูุฑูุจ ุจุณุชุงุดูู.jpg'],
      
      // Matcha and Pink drinks
      'ูุงุชุดุง ูุงุชูู': ['ุจููู ูุงุชุดุง ูุงุชูู+ุจููู ุจูุฑู ูุงุชุดุง ูุงุชูู.jpg'],
      'ุจููู ูุงุชุดุง ูุงุชูู': ['ุจููู ูุงุชุดุง ูุงุชูู+ุจููู ุจูุฑู ูุงุชุดุง ูุงุชูู.jpg'],
      'ุจููู ุจูุฑู ูุงุชุดุง ูุงุชูู': ['ุจููู ูุงุชุดุง ูุงุชูู+ุจููู ุจูุฑู ูุงุชุดุง ูุงุชูู.jpg'],
      'ุณุชุฑูุจูุฑู ูุงุชุดุง ูุงุชูู': ['ุงูุณ ุจููู ูุงุชุดุง+ ุงูุณ ุจููู ุจูุฑู ูุงุชุดุง.jpg'],
      
      // Mojitos and Smoothies
      'ููููุชู ุจุงุดู ุจุฑุชูุงู': ['ููููุชู ุจุงุดู ุจุฑุชูุงู .jpg'],
      'ููููุชู ูุงูุฌู': ['ููููุชู ูุงูุฌู .jpg'],
      'ููููุชู ูููุณ ุจูุฑูุฒ': ['ููููุชู ูููุณ ุจูุฑูุฒ .jpg'],
      'ููููุชู ุฒูุฌุจูู': ['ููููุชู ุฒูุฌุจูู .jpg'],
      'ููููุชู ูุฑูุฒ': ['ููููุชู ูุฑูุฒ.jpg'],
      'ููููุชู ูููู': ['ููููุชู ูููู .jpg'],
      'ููููุชู ุฏุฑุงู': ['ููููุชู ุฏุฑุงู.jpg'],
      'ููููุชู ุฑูุงู': ['ููููุชู ุฑูุงู .jpg'],
      'ููููุชู ุงูุงูุงุณ': ['ููููุชู ุฃูุงูุงุณ .jpg'],
      'ููููุชู ุฎูุงุฑ': ['ููููุชู ุฎูุงุฑ .jpg'],
      'ููุงุณูู ููููุชู': ['ููุงุณูู ููููุชู .jpg'],
      
      // Smoothies
      'ุณููุฒู ุฑูุงู': ['ุณููุฒู ููููู ูุน ุฑูุงู .jpg'],
      'ุณููุฒู ูุงูุฌู': ['ุณููุฒู ูุงูุฌู .jpg'],
      'ุณููุฒู ูุฑูุฒ': ['ุณููุฒู ูุฑูุฒ .jpg'],
      'ุณููุฒู ูููุณ ุจูุฑูุฒ': ['ุณููุฒู ูููุณ ุจูุฑูุฒ .jpg'],
      'ุณููุฒู ุจุฑุชูุงู': ['ุณููุฒู ุฃูุงูุงุณ ุจุฑุชูุงู .jpg'],
      'ุณููุฒู ุฏุฑุงู': ['ุณููุฒู ุฏุฑุงู .jpg'],
      'ุณููุฒู ุฃูุงูุงุณ': ['ุณููุฒู ุฃูุงูุงุณ .jpg'],
      
      // Juices
      'ุนุตูุฑ ุงูุงูุงุณ': ['ุนุตูุฑ ุงูุงูุงุณ .jpg'],
      'ุนุตูุฑ ูุฑูุฒ': ['ุนุตูุฑ ูุฑูุฒ .jpg'],
      'ุนุตูุฑ ูููู': ['ุนุตูุฑ ูููู .jpg'],
      'ุนุตูุฑ ุฏุฑุงู': ['ุนุตูุฑ ุฏุฑุงู .jpg'],
      'ุนุตูุฑ ุฑูุงู': ['ุนุตูุฑ ุฑูุงู .jpg'],
      'ุนุตูุฑ ุฌุฒุฑ': ['ุนุตูุฑ ุฌุฒุฑ.jpg'],
      'ุนุตูุฑ ุชูุงุญ': ['ุนุตูุฑ ุชูุงุญ.jpg'],
      'ุนุตูุฑ ุจุฑุชูุงู': ['ุนุตูุฑ ุจุฑุชูุงู .jpg'],
      'ุนุตูุฑ ุนูุจ': ['ุนุตูุฑ ุนูุจ .jpg'],
      'ุนุตูุฑ ูุงูุฌู': ['ุนุตูุฑ ูุงูุฌู .jpg'],
      'ุนุตูุฑ ุจุทูุฎ': ['ุนุตูุฑ ุจุทูุฎ .jpg'],
      'ุนุตูุฑ ุดูุงู': ['ุนุตูุฑ ุดูุงู .jpg'],
      
      // Milkshakes
      'ูููู ุดูู ุจุณุชุงุดูู': ['ูููู ุดูู ุจุณุชุงุดูู .jpg'],
      'ูููู ุดูู ุดููููุง': ['ูููู ุดูู ุดููููุง.jpg'],
      'ูููู ุดูู ูุฑูุฒ': ['ูููู ุดูู ูุฑูุฒ.jpg'],
      'ูููู ุดูู ูุงููููุง': ['ูุงููููุง ูููู ุดูู .jpg'],
      'ูููู ุดูู ุงูุฑูู': ['ููุชุณ ูููู ุดูู .jpg'],
      
      // Teas and Herbal drinks
      'ุดุงู': ['ุดุงู .jpg'],
      'ุดุงู ุชู ูุงุชูู': ['ุดุงู ุชู ูุงุชูู.jpg'],
      'ุฒููุฑุงุช': ['ุฒููุฑุงุช .jpg'],
      'ุฒูุฒููู': ['ุฒูุฒููู .jpg'],
      'ุณุญูุจ ุจุงููุฑูุฉ': ['ุณุญูุจ ูุน ูุฑูุฉ.jpg'],
      
      // Hot chocolate and drinks
      'ููุช ุดูููุช': ['ููุช ุดูููุช.jpg'],
      'ูุงูุช ููุช ุดูููุช': ['ูุงูุช ููุช ุดูููุช.jpg'],
      
      // Filter coffee
      'ููุชุฑ ูููุฉ': ['ูููุฉ ุชุฑููุฉ+ุนุฑุจูุฉ.jpg'],
      'ููุชุฑ ูููุฉ ุจุงูุญููุจ': ['ุงูุณ ูููุชุฑุฉ ูููุฉ ุจุงูุญููุจ.jpg'],
      'ุงูุณ ูููุชุฑ ูููุฉ': ['ุงูุณ ูููุชุฑุฉ ูููุฉ ุจุงูุญููุจ.jpg'],
      'ุงูุณ ูููุชุฑ ูููุฉ ุจุงูุญููุจ': ['ุงูุณ ูููุชุฑุฉ ูููุฉ ุจุงูุญููุจ.jpg'],
      
      // Turkish and Arabic coffee
      'ูููุฉ ุชุฑููุฉ': ['ูููุฉ ุชุฑููุฉ+ุนุฑุจูุฉ.jpg'],
      'ูููุฉ ุชุฑููุฉ ุฏุจู': ['ูููุฉ ุชุฑููุฉ+ุนุฑุจูุฉ.jpg'],
      'ูููุฉ ุนุฑุจูุฉ': ['ูููุฉ ุชุฑููุฉ+ุนุฑุจูุฉ.jpg'],
      'ูููุฉ ุนุฑุจูุฉ ุฏุจู': ['ูููุฉ ุชุฑููุฉ+ุนุฑุจูุฉ.jpg'],
      
      // Pancakes
      'ุจุงู ููู': ['ูููู ุจุงู ููู ุดููููุง.jpg'],
      'ุจุงู ููู ุจุงูุนุณู': ['ูููู ุจุงู ููู ุดููููุง.jpg'],
      'ุจุงู ููู ุจุงูุดููููุง': ['ูููู ุจุงู ููู ุดููููุง.jpg'],
      'ุจุงู ููู ุจุงููุฑูุฒ': ['ูููู ุจุงู ููู ููุงูู .jpg'],
      
      // Cakes and desserts
      'ุชุดูุฒ ููู': ['ุชุดูุฒ ููู ุดููููุง.jpg'],
      'ุชุดูุฒ ููู ุดููููุง': ['ุชุดูุฒ ููู ุดููููุง.jpg'],
      'ุชุดูุฒ ููู ูุฑูุฒ': ['ุชุดูุฒ ููู ูุฑูุฒ .jpg'],
      'ุชุดูุฒ ููู ุจุณุชุงุดูู': ['ุชุดูุฒ ููู ุจุณุชุงุดูู.jpg'],
      'ุชุดูุฒ ููู ุจูู ุจูุฑู': ['ุชุดูุฒ ููู ุจูู ุจูุฑู.jpg'],
      'ุชูุฑุงููุณู': ['ุชูุฑุงููุณู.jpg'],
      'ูููุฉ ุงูุนุณู': ['ูููุฉ ุงูุนุณู.jpg'],
      'ูููุฉ ุจุฑุงูููุฒ': ['ูููุฉ ุจุฑุงูููุฒ.jpg'],
      'ูููุฉ ุงูุฌุฒุฑ': ['ูููุฉ ุงูุฌุฒุฑ.jpg'],
      'ูููุฏูู': ['ูููุฏูู .jpg'],
      'ููู ุงูุฑูู': ['ุจุงู ููู ุงูุฑูู.jpg'],
      
      // Cookies
      'ููููุฒ ุจูุฏูู': ['ููููุฒ ุจูุฏูู .jpg'],
      'ููููุฒ ููุชูุณ': ['ููููุฒ ููุชูุณ.jpg'],
      'ููููุฒ ุจุณุชุงุดูู': ['ููููุฒ ุจุณุชุงุดูู.jpg'],
      'ููููุฒ ุชูุช ุงุญูุฑ': ['ููููุฒ ุชูุช ุงุญูุฑ .jpg'],
      
      // Croissants
      'ูุฑูุณุงู ุณุงุฏุฉ': ['ูุฑูุณุงู ุจุณุชุงุดูู.jpg'],
      
      // Frappuccinos
      'ูุฑุงุจุชุดููู ูุฑุงููู': ['ูุฑุงููู ูุฑุงู .jpg'],
      'ูุฑุงุจุชุดููู ูููุง': ['ูููุง ูุฑุงุจ .jpg'],
      'ูุฑุงุจุชุดููู ูุฑูุฒ': ['ูุฑุงุจุชุดููู ูุฑูุฒ .jpg'],
      'ูุฑุงุจุชุดููู ุดููููุง': ['ูุฑุงุจุชุดููู ุดููููุง .jpg'],
      'ูุฑุงุจุชุดููู ูุงููููุง': ['ูุฑุงุจุชุดููู ูุงููููุง .jpg'],
      'ูุฑุงุจุชุดููู ูุงุชุดุง': ['ูุฑุงุจุชุดููู ูุงุชุดุง .jpg'],
      
      // Iced drinks
      'ุงูุณ ูุงุชูู': ['ุงูุณ ูุงุชูู.jpg'],
      'ุงูุณ ุงูุฑููุงูู': ['ุงูุณ ุงูุฑููุงูู .jpg'],
      'ุงูุณ ูููุง ูุงุชูู': ['ุงูุณ ูููุง ูุงุชูู .jpg'],
      'ุงูุณ ูุฑุงููู ูููุงุชู': ['ุงูุณ ูุฑุงููู ูููุงุชู .jpg'],
      'ุงูุณ ูุงููููุง ูุงุชูู': ['ุงูุณ ูุงููููุง ูุงุชูู .jpg'],
      'ุงูุณ ูุฑุงููู ูุงุชูู': ['ุงูุณ ูุฑุงููู ูุงุชูู .jpg'],
      
      // Special items
      'ูู 60': ['ูู 60 .jpg'],
      'ุงูุจุฑุง': ['ุงูุจุฑุง .jpg'],
      'ุฒูุจุฑุง ูููุง': ['ุฒูุจุฑุง ูููุง .jpg'],
      'ูุฑุงููู ูููุงุชู': ['ูุงุฑุงููู ูุงููุงุชู .jpg'],
      
      // Lemonade
      'ูููููุงุถุง': ['ูููููุงุถุง .jpg'],
    };

    return mappings;
  }

  /**
   * Find matching photo for an item using manual mappings
   */
  findMatchingPhoto(arabicName, photoFiles, manualMappings) {
    const normalizedItemName = this.normalizeArabicText(arabicName);
    
    // Check manual mappings first
    for (const [itemName, possiblePhotos] of Object.entries(manualMappings)) {
      const normalizedMappedName = this.normalizeArabicText(itemName);
      if (normalizedItemName === normalizedMappedName) {
        // Find the first available photo from the list
        for (const photo of possiblePhotos) {
          if (photoFiles.includes(photo)) {
            return photo;
          }
        }
      }
    }
    
    // Fallback to automatic matching
    for (const photo of photoFiles) {
      const photoName = path.basename(photo, '.jpg');
      const normalizedPhotoName = this.normalizeArabicText(photoName);
      
      if (normalizedItemName === normalizedPhotoName) {
        return photo;
      }
    }
    
    return null;
  }

  /**
   * Upload photos and match them with menu items
   */
  async uploadAndMatchPhotos() {
    console.log('๐ธ Starting improved photo upload and matching...\n');

    try {
      // Check if photos folder exists
      try {
        await fs.access(this.photosFolder);
      } catch (error) {
        console.error(`โ Photos folder not found: ${this.photosFolder}`);
        return;
      }

      // Get all photo files
      const photoFiles = await fs.readdir(this.photosFolder);
      const jpgFiles = photoFiles.filter(file => file.toLowerCase().endsWith('.jpg'));
      
      console.log(`๐ Found ${jpgFiles.length} photos in folder`);
      
      if (jpgFiles.length === 0) {
        console.log('โ No JPG files found in photos folder');
        return;
      }

      // Get all menu items
      const items = await this.getAllItems();
      
      if (items.length === 0) {
        console.log('โ No items found in database');
        return;
      }

      // Create manual mappings
      const manualMappings = this.createManualMappings();

      let uploadedCount = 0;
      let matchedCount = 0;
      let failedUploads = 0;
      let unmatchedItems = 0;

      // Upload photos and create mappings
      console.log('\n๐ Uploading photos to Supabase Storage...');
      for (let i = 0; i < jpgFiles.length; i++) {
        const photoFile = jpgFiles[i];
        try {
          const photoPath = path.join(this.photosFolder, photoFile);
          const imageBuffer = await fs.readFile(photoPath);
          
          // Create unique filename
          const safeFilename = this.createSafeFilename(photoFile, i);
          
          const uploadResult = await this.uploadImageToSupabase(imageBuffer, safeFilename);
          
          if (uploadResult.success) {
            this.photoMappings.set(photoFile, uploadResult.url);
            uploadedCount++;
            console.log(`โ Uploaded: ${photoFile} โ ${safeFilename}`);
          } else {
            failedUploads++;
            console.error(`โ Failed: ${photoFile} - ${uploadResult.error}`);
          }
          
          // Small delay to avoid overwhelming the server
          await new Promise(resolve => setTimeout(resolve, 100));
        } catch (error) {
          console.error(`โ Error processing ${photoFile}:`, error.message);
          failedUploads++;
        }
      }

      console.log(`\n๐ Upload Summary: ${uploadedCount} uploaded, ${failedUploads} failed`);

      // Now match photos with menu items
      console.log('\n๐ฏ Matching photos with menu items...');
      for (const item of items) {
        const arabicName = item.names?.ar || '';
        const matchingPhoto = this.findMatchingPhoto(arabicName, jpgFiles, manualMappings);
        
        if (matchingPhoto && this.photoMappings.has(matchingPhoto)) {
          const imageUrl = this.photoMappings.get(matchingPhoto);
          
          console.log(`๐ฏ ${arabicName} โ ${matchingPhoto}`);
          
          const updated = await this.updateItemImage(item.id, imageUrl);
          
          if (updated) {
            matchedCount++;
          }
          
          // Small delay to avoid overwhelming the server
          await new Promise(resolve => setTimeout(resolve, 50));
        } else {
          console.log(`โ No match found for: ${arabicName}`);
          unmatchedItems++;
        }
      }

      console.log(`\n๐ Final Results:`);
      console.log(`โ Photos uploaded: ${uploadedCount}`);
      console.log(`๐ฏ Items matched: ${matchedCount}`);
      console.log(`โ Upload failures: ${failedUploads}`);
      console.log(`โ Unmatched items: ${unmatchedItems}`);

      console.log('\n๐ Improved photo upload and matching completed!');
      console.log('\n๐ Next steps:');
      console.log('1. Refresh your browser to see the actual photos');
      console.log('2. Each item should now display its real uploaded photo');
      console.log('3. Check the admin panel to verify the images are correct');

    } catch (error) {
      console.error('โ Upload and matching process failed:', error.message);
      process.exit(1);
    }
  }
}

// Main execution
async function main() {
  const matcher = new ImprovedPhotoMatcher();
  await matcher.uploadAndMatchPhotos();
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = ImprovedPhotoMatcher;
