#!/usr/bin/env node

/**
 * Translate Photo Names Script
 * 
 * This script translates Arabic photo names to English and creates
 * a mapping file for easy auto-matching with menu items.
 */

const fs = require('fs').promises;
const path = require('path');

class PhotoNameTranslator {
  constructor() {
    this.photosFolder = path.join(__dirname, '..', 'Piko Web app Photos');
    this.translationMappings = new Map();
    this.englishNames = [];
  }

  /**
   * Arabic to English translation dictionary
   */
  getTranslationDictionary() {
    return {
      // Coffee and drinks
      'ÿßÿ≥ÿ®ÿ±Ÿäÿ≥Ÿà': 'espresso',
      'ÿØÿ®ŸÑ ÿßÿ≥ÿ®ÿ±Ÿäÿ≥Ÿà': 'double-espresso',
      'ÿßŸÖÿ±ŸäŸÉÿßŸÜŸà': 'americano',
      'ŸÉÿßÿ®ÿ™ÿ¥ŸäŸÜŸà': 'cappuccino',
      'ŸÑÿßÿ™ŸäŸá': 'latte',
      'ŸÖŸàŸÉÿß': 'mocha',
      'ŸÖÿßÿ™ÿ¥ÿß': 'matcha',
      'ŸÉŸàÿ±ÿ™ÿßÿØŸà': 'cortado',
      'ŸÅŸÑÿßÿ™ ŸàÿßŸäÿ™': 'flat-white',
      'ŸÅŸÑÿ™ÿ± ŸÇŸáŸàÿ©': 'filter-coffee',
      'ŸÇŸáŸàÿ© ÿ™ÿ±ŸÉŸäÿ©': 'turkish-coffee',
      'ŸÇŸáŸàÿ© ÿπÿ±ÿ®Ÿäÿ©': 'arabic-coffee',
      'ÿßŸäÿ≥': 'iced',
      'ŸáŸàÿ™': 'hot',
      'ŸàÿßŸäÿ™': 'white',
      
      // Flavors and ingredients
      'ŸÉÿ±ÿßŸÖŸäŸÑ': 'caramel',
      'ŸÅÿßŸÜŸäŸÑŸäÿß': 'vanilla',
      'ÿ¥ŸàŸÉŸàŸÑÿß': 'chocolate',
      'ÿ¥ŸàŸÉŸÑŸäÿ™': 'chocolate',
      'ÿ®ÿ≥ÿ™ÿßÿ¥ŸäŸà': 'pistachio',
      'ÿ®ŸÜÿØŸÇ': 'hazelnut',
      'ÿ®ŸÜÿØŸàŸÇ': 'hazelnut',
      'ŸÑŸàÿ≤': 'almond',
      'ŸÅÿ±Ÿäÿ≤': 'strawberry',
      'ÿ≥ÿ™ÿ±Ÿàÿ®Ÿäÿ±Ÿä': 'strawberry',
      'ÿ≥ÿ™ÿ±Ÿàÿ®ÿ±Ÿä': 'strawberry',
      'ÿ®ÿ±ÿ™ŸÇÿßŸÑ': 'orange',
      'ŸÑŸäŸÖŸàŸÜ': 'lemon',
      'ÿßŸÜÿßŸÜÿßÿ≥': 'pineapple',
      'ŸÖÿßŸÜÿ¨Ÿà': 'mango',
      'ŸÉŸäŸàŸä': 'kiwi',
      'ÿ±ŸÖÿßŸÜ': 'pomegranate',
      'ÿØÿ±ÿßŸÇ': 'peach',
      'ÿ®ÿßÿ¥ŸÜ': 'passion',
      'ÿ®ŸäŸÜŸÉ': 'pink',
      'ÿ®ŸÑŸà ÿ®Ÿäÿ±Ÿä': 'blueberry',
      'ŸÖŸäŸÉÿ≥ ÿ®Ÿäÿ±Ÿä': 'mixed-berry',
      'ŸÖŸäŸÉÿ≥ ÿ®Ÿäÿ±Ÿäÿ≤': 'mixed-berry',
      'ÿ™ŸÅÿßÿ≠': 'apple',
      'ÿ¨ÿ≤ÿ±': 'carrot',
      'ÿ®ÿ∑ŸäÿÆ': 'watermelon',
      'ÿ¥ŸÖÿßŸÖ': 'cantaloupe',
      'ÿπŸÜÿ®': 'grape',
      'ŸÖŸàÿ≤': 'banana',
      'ÿßŸÅŸàŸÉÿßÿØŸà': 'avocado',
      
      // Desserts and pastries
      'ŸÉÿ±Ÿäÿ®': 'crepe',
      'ŸàÿßŸÅŸÑ': 'waffle',
      'ÿ®ÿßŸÜ ŸÉŸäŸÉ': 'pancake',
      'ŸÖŸäŸÜŸä ÿ®ÿßŸÜ ŸÉŸäŸÉ': 'mini-pancake',
      'ÿ™ÿ¥Ÿäÿ≤ ŸÉŸäŸÉ': 'cheesecake',
      'ÿ™Ÿäÿ±ÿßŸÖŸäÿ≥Ÿà': 'tiramisu',
      'ÿßŸàÿ®ÿ±ÿß': 'opera',
      'ŸÅŸàŸÜÿØŸàŸÜ': 'fondant',
      'ŸÉÿ±Ÿàÿ≥ÿßŸÜ': 'croissant',
      'ŸÉŸàŸÉŸäÿ≤': 'cookies',
      'ŸÉŸäŸÉÿ©': 'cake',
      'ŸÉŸäŸÉ': 'cake',
      'ÿ®ÿ±ÿßŸàŸÜŸäÿ≤': 'brownies',
      'ÿ™ÿ¥ŸÖŸÜŸä': 'chocolate',
      'ŸÑŸàÿ™Ÿàÿ≥': 'lotus',
      'ÿßŸàÿ±ŸäŸà': 'oreo',
      'ŸÖÿßÿ±ÿ¥ŸÖŸäŸÑŸà': 'marshmallow',
      'ŸÖŸäŸÜŸä': 'mini',
      
      // Beverages
      'ŸÖŸàŸáŸäÿ™Ÿà': 'mojito',
      'ÿ≥ŸÖŸàÿ≤Ÿä': 'smoothie',
      'ÿπÿµŸäÿ±': 'juice',
      'ÿ¥ÿßŸä': 'tea',
      'ÿ≤ŸáŸàÿ±ÿßÿ™': 'herbal-tea',
      'ÿ≤Ÿäÿ≤ŸÅŸàŸÜ': 'linden-tea',
      'ÿ≥ÿ≠ŸÑÿ®': 'salep',
      'ŸÖŸäŸÑŸÉ ÿ¥ŸäŸÉ': 'milkshake',
      'ŸÅÿ±ÿßÿ®': 'frappuccino',
      'ŸÅÿ±ÿßÿ®ÿ™ÿ¥ŸäŸÜŸà': 'frappuccino',
      'ŸÉŸàŸÑ': 'cool',
      'ŸáŸäÿ®ÿ≥ŸÉŸàÿ≥': 'hibiscus',
      'Ÿáÿ®Ÿäÿ≥ŸÉŸàÿ≥': 'hibiscus',
      'ÿ®ÿßÿ®ŸÑÿ≤': 'bubbles',
      'ŸÖŸäŸÉÿ≥': 'mix',
      'ÿµŸàÿØÿß': 'soda',
      'ÿ±ŸäÿØ ÿ®ŸàŸÑ': 'red-bull',
      'ÿ≥ŸÅŸÜ': '7up',
      'ŸÉŸÑÿßÿ≥ŸäŸÉ': 'classic',
      'ÿ®ŸäŸÉŸà': 'piko',
      'ÿ≤ŸÜÿ¨ÿ®ŸäŸÑ': 'ginger',
      'ŸÑŸäŸÖŸàŸÜÿßÿ∂ÿß': 'lemonade',
      'ŸÜÿπŸÜÿßÿπ': 'mint',
      'ÿÆŸäÿßÿ±': 'cucumber',
      'ŸÇÿ±ŸÅÿ©': 'cinnamon',
      
      // Size variants
      'ŸÉÿ®Ÿäÿ±': 'large',
      'Ÿàÿ≥ÿ∑': 'medium',
      'ÿµÿ∫Ÿäÿ±': 'small',
      
      // Other terms
      'ÿ®ÿßŸÑŸÇÿ±ŸÅÿ©': 'with-cinnamon',
      'ÿ®ÿßŸÑÿ≠ŸÑŸäÿ®': 'with-milk',
      'ÿ®ÿßŸÑÿπÿ≥ŸÑ': 'with-honey',
      'ÿ®ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿß': 'with-chocolate',
      'ÿ®ÿßŸÑŸÅÿ±Ÿäÿ≤': 'with-strawberry',
      'ÿ®ÿßŸÑŸÅŸàÿßŸÉŸá': 'with-fruits',
      'ÿ≥ÿßÿØÿ©': 'plain',
      'ÿ≥ÿÆŸÜ': 'hot',
      'ÿ®ÿßÿ±ÿØ': 'cold',
      'ŸÖÿÆÿ™ŸÑÿ∑ÿ©': 'mixed',
      'ŸÖÿπ': 'with',
      'Ÿà': 'and',
      '+': 'and',
      
      // Special items
      'ŸÅŸä 60': 'in-60',
      'ÿ™ÿµŸàŸäÿ±': 'photo',
      'ÿ™ÿµŸàŸäÿ±Ÿà': 'photo',
      'ŸÖÿ≥ÿ≠': 'scan',
      'ŸÖÿµŸàÿ±': 'photographed',
      'ŸÖÿµŸàÿ± ŸÖÿ±ÿ™ŸäŸÜ': 'photographed-twice',
      'ŸÖÿπÿßÿØ ÿ™ÿµŸàŸäÿ±Ÿá': 're-photographed',
      'ŸÖÿπÿßÿØ ÿ™ÿµŸàŸäÿ±Ÿà': 're-photographed',
      'ŸÑŸàÿ™ÿ≥ ÿ®ÿ±ŸÅŸäÿ™ÿ±ŸàŸÑ': 'lotus-prefiterol',
      'ÿ™ÿ¥ÿ±Ÿä ÿ®ŸÑŸàÿ≥ŸÖ': 'cherry-blossom',
      'ŸÉÿßÿ±Ÿäÿ®ŸäÿßŸÜ': 'caribbean',
      'ÿ®ÿßŸÑŸÑŸäŸÖŸàŸÜ': 'with-lemon',
      'ÿ®ÿßŸÑŸÖÿπ': 'with-mint',
      'ÿ®ÿ±ŸäÿØ': 'with-red',
      'ÿ®ÿ£ÿ®Ÿäÿ∂': 'with-white',
      'ÿ®ÿ£ÿ≥ŸàÿØ': 'with-black',
      'ÿ®ÿ£ÿÆÿ∂ÿ±': 'with-green',
      'ÿ®ÿ£ŸàŸÑŸàŸÜÿ¨': 'with-oolong',
      'ÿ®ÿ¨Ÿàÿ≤ ÿßŸÑŸáŸÜÿØ': 'with-coconut',
      'ÿ®ÿ®ÿ≥ÿ™ÿßÿ¥ŸäŸà': 'with-pistachio',
      'ÿ®ÿ®ŸÜÿØŸÇ': 'with-hazelnut',
      'ÿ®ÿ®ŸÜÿØŸàŸÇ': 'with-hazelnut',
      'ÿ®ŸÉÿ±ÿßŸÖŸäŸÑ': 'with-caramel',
      'ÿ®ŸÅÿßŸÜŸäŸÑŸäÿß': 'with-vanilla',
      'ÿ®ÿ¥ŸàŸÉŸàŸÑÿß': 'with-chocolate',
      'ÿ®ÿ¥ŸàŸÉŸÑŸäÿ™': 'with-chocolate',
      'ÿ®ŸÅÿ±Ÿäÿ≤': 'with-strawberry',
      'ÿ®ÿ≥ÿ™ÿ±Ÿàÿ®Ÿäÿ±Ÿä': 'with-strawberry',
      'ÿ®ÿ®ÿ±ÿ™ŸÇÿßŸÑ': 'with-orange',
      'ÿ®ŸÑŸäŸÖŸàŸÜ': 'with-lemon',
      'ÿ®ÿßŸÜÿßŸÜÿßÿ≥': 'with-pineapple',
      'ÿ®ŸÖÿßŸÜÿ¨Ÿà': 'with-mango',
      'ÿ®ŸÉŸäŸàŸä': 'with-kiwi',
      'ÿ®ÿ±ŸÖÿßŸÜ': 'with-pomegranate',
      'ÿ®ÿØÿ±ÿßŸÇ': 'with-peach',
      'ÿ®ÿ®ÿßÿ¥ŸÜ': 'with-passion',
      'ÿ®ÿ®ŸäŸÜŸÉ': 'with-pink',
      'ÿ®ÿ®ŸÑŸà ÿ®Ÿäÿ±Ÿä': 'with-blueberry',
      'ÿ®ŸÖŸäŸÉÿ≥ ÿ®Ÿäÿ±Ÿä': 'with-mixed-berry',
      'ÿ®ÿ™ŸÅÿßÿ≠': 'with-apple',
      'ÿ®ÿ¨ÿ≤ÿ±': 'with-carrot',
      'ÿ®ÿ®ÿ∑ŸäÿÆ': 'with-watermelon',
      'ÿ®ÿ¥ŸÖÿßŸÖ': 'with-cantaloupe',
      'ÿ®ÿπŸÜÿ®': 'with-grape',
      'ÿ®ŸÖŸàÿ≤': 'with-banana',
      'ÿ®ÿßŸÅŸàŸÉÿßÿØŸà': 'with-avocado',
      'ÿ®ÿ≤ŸÜÿ¨ÿ®ŸäŸÑ': 'with-ginger',
      'ÿ®ŸÜÿπŸÜÿßÿπ': 'with-mint',
      'ÿ®ÿÆŸäÿßÿ±': 'with-cucumber',
      'ÿ®ŸÇÿ±ŸÅÿ©': 'with-cinnamon',
      'ÿ®ÿ≥ÿ≠ŸÑÿ®': 'with-salep',
      'ÿ®ÿ¥ÿßŸä': 'with-tea',
      'ÿ®ÿ≤ŸáŸàÿ±ÿßÿ™': 'with-herbal-tea',
      'ÿ®ÿ≤Ÿäÿ≤ŸÅŸàŸÜ': 'with-linden-tea',
      'ÿ®ŸáŸäÿ®ÿ≥ŸÉŸàÿ≥': 'with-hibiscus',
      'ÿ®ÿ®ÿßÿ®ŸÑÿ≤': 'with-bubbles',
      'ÿ®ŸÖŸäŸÉÿ≥': 'with-mix',
      'ÿ®ÿµŸàÿØÿß': 'with-soda',
      'ÿ®ÿ±ŸäÿØ ÿ®ŸàŸÑ': 'with-red-bull',
      'ÿ®ÿ≥ŸÅŸÜ': 'with-7up',
      'ÿ®ŸÉŸÑÿßÿ≥ŸäŸÉ': 'with-classic',
      'ÿ®ÿ®ŸäŸÉŸà': 'with-piko',
      'ÿ®ŸÑŸäŸÖŸàŸÜÿßÿ∂ÿß': 'with-lemonade'
    };
  }

  /**
   * Normalize Arabic text
   */
  normalizeArabicText(text) {
    return text
      .replace(/[\u064B-\u0652\u0670\u0640]/g, '') // Remove diacritics
      .replace(/[ÿ£ÿ•ÿ¢]/g, 'ÿß') // Normalize alef variants
      .replace(/[ÿ©]/g, 'Ÿá') // Normalize teh marbuta
      .replace(/[Ÿä]/g, 'Ÿä') // Normalize yeh
      .replace(/\s+/g, ' ') // Normalize spaces
      .replace(/[^\u0600-\u06FF\s]/g, '') // Keep only Arabic and spaces
      .trim();
  }

  /**
   * Translate Arabic text to English
   */
  translateToEnglish(arabicText) {
    const normalizedText = this.normalizeArabicText(arabicText);
    const words = normalizedText.split(/\s+/);
    const translatedWords = [];
    
    for (const word of words) {
      if (word.trim()) {
        const translation = this.getTranslationDictionary()[word] || word;
        translatedWords.push(translation);
      }
    }
    
    return translatedWords.join('-');
  }

  /**
   * Create safe filename for Supabase Storage
   */
  createSafeFilename(originalName, translation) {
    // Use translation if available, otherwise use original with index
    const baseName = translation || originalName.replace('.jpg', '');
    
    // Remove any remaining non-ASCII characters and create safe filename
    const safeName = baseName
      .replace(/[^a-zA-Z0-9.-]/g, '-')
      .replace(/-+/g, '-')
      .replace(/^-|-$/g, '')
      .toLowerCase();
    
    return `${safeName}.jpg`;
  }

  /**
   * Process all photos and create translation mappings
   */
  async processPhotos() {
    console.log('üîÑ Processing photos and creating English translations...\n');

    try {
      // Check if photos folder exists
      try {
        await fs.access(this.photosFolder);
      } catch (error) {
        console.error(`‚ùå Photos folder not found: ${this.photosFolder}`);
        return;
      }

      // Get all photo files
      const photoFiles = await fs.readdir(this.photosFolder);
      const jpgFiles = photoFiles.filter(file => file.toLowerCase().endsWith('.jpg'));
      
      console.log(`üìÅ Found ${jpgFiles.length} photos to process`);
      
      if (jpgFiles.length === 0) {
        console.log('‚ùå No JPG files found in photos folder');
        return;
      }

      const translations = [];
      let processedCount = 0;

      // Process each photo
      for (const photoFile of jpgFiles) {
        const originalName = photoFile.replace('.jpg', '');
        const normalizedName = this.normalizeArabicText(originalName);
        const englishTranslation = this.translateToEnglish(normalizedName);
        const safeFilename = this.createSafeFilename(originalName, englishTranslation);
        
        const translation = {
          originalName: photoFile,
          normalizedArabic: normalizedName,
          englishTranslation: englishTranslation,
          safeFilename: safeFilename,
          index: processedCount
        };
        
        translations.push(translation);
        processedCount++;
        
        console.log(`üìù ${photoFile}`);
        console.log(`   Arabic: ${normalizedName}`);
        console.log(`   English: ${englishTranslation}`);
        console.log(`   Safe filename: ${safeFilename}`);
        console.log('');
      }

      // Create mapping file
      const mappingData = {
        metadata: {
          totalPhotos: translations.length,
          processedAt: new Date().toISOString(),
          description: 'Arabic to English photo name translations for auto-matching'
        },
        translations: translations
      };

      const mappingFilePath = path.join(__dirname, '..', 'photo-translation-mapping.json');
      await fs.writeFile(mappingFilePath, JSON.stringify(mappingData, null, 2));
      
      console.log(`‚úÖ Created translation mapping file: ${mappingFilePath}`);
      console.log(`üìä Processed ${processedCount} photos`);
      
      // Create summary
      console.log('\nüìã Translation Summary:');
      console.log(`‚úÖ Total photos processed: ${processedCount}`);
      console.log(`üìÑ Mapping file created: photo-translation-mapping.json`);
      console.log(`üîÑ Ready for auto-matching with menu items`);
      
      console.log('\nüìù Next steps:');
      console.log('1. Use the mapping file to upload photos with English names');
      console.log('2. Auto-match the translated names with menu items');
      console.log('3. Update the database with correct image URLs');

    } catch (error) {
      console.error('‚ùå Photo processing failed:', error.message);
      process.exit(1);
    }
  }
}

// Main execution
async function main() {
  const translator = new PhotoNameTranslator();
  await translator.processPhotos();
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = PhotoNameTranslator;
